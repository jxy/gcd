# system specifics for mira@anl

if [[ ! -z ${COBALT_JOBID+X} ]];then
	declare -r gcd_SYS_UNIQUEID=$COBALT_JOBID
	declare -r gcd_SYS_LOCK="$gcd_WORKDIR/.sys.lock.$gcd_SYS_UNIQUEID"	# lock for block operations
	declare -ir gcd_SYS_SIZE=$COBALT_JOBSIZE
	declare -ir gcd_SYS_ENDTIME=$COBALT_ENDTIME
fi

declare -ir gcd_SYS_MAXQUEUE=20
declare -ir gcd_SYS_BLOCKSIZE_DEFAULT=512

declare gcd_SYS_BOOTEDBLOCK

# gcd_SYS_RUNENV is used without quotes
declare gcd_SYS_RUNENV+=" TZ=US/Central"
gcd_SYS_RUNENV+=" PAMID_VERBOSE=1"
gcd_SYS_RUNENV+=" RUNJOB_VERBOSE=4"
gcd_SYS_RUNENV+=" OMP_WAIT_POLICY=active"
gcd_SYS_RUNENV+=" BG_SMP_FAST_WAKEUP=yes"
gcd_SYS_RUNENV+=" BG_THREADLAYOUT=2"
# gcd_SYS_RUNENV+=" PAMID_COLLECTIVES=0"
# gcd_SYS_RUNENV+=" BG_COREDUMPONEXIT=1"

declare -a gcd__SYS_BOOTBLOCK
declare -ai gcd__SYS_BOOTPID=()

gcd-sys-diagnosis(){	# do some diagnosis of the job
	# this is the bluegene job id that coreprocessor requires
	#bgjid=$(sed -n -E '/job.*started/s/^.*job ([0-9]*) started/\1/p' $O.error)
	#echo "$(date) :: Job $jxy_jid run $nrun start from traj $traj with process $pid had bad health, attach coreprocessor to bgpid $bgjid"
	#coreprocessor.pl -nogui -j=$bgjid \
	# -b=/home/osborn/lqcd/install/qhmc-git-c3-spi/bin/qhmc:/bgsys/drivers/ppcfloor/boot/cnk \
	# -snapshot=core/snapshot.$COBALT_JOBID.$nrun.$bgjid \
	# >core/processed.$COBALT_JOBID.$nrun.$bgjid
	#st=$?
	#echo "$(date) :: Job $jxy_jid run $nrun start from traj $traj with process $pid coreprocessor finished and returned $st"
	return 0
}

gcd-sys-alloc(){	# Find available blocks and boot them, populate array gcd__SYS_BOOTBLOCK gcd__SYS_BOOTPID gcd_SYS_BOOTEDBLOCK
	# For gcd_SYS_BLOCKSIZE_DEFAULT, all available blocks are booted simultaneously.
	# For other block sizes, only boot one block.
	# If unwaited blocks exist and their sizes are equal to gcd_SYS_BLOCKSIZE_DEFAULT, return without error.
	# arg: BLOCKSIZE
	local -i n
	for((n=0;n<${#gcd__SYS_BOOTPID[@]};++n));do if((gcd__SYS_BOOTPID[n]>0));then
		if((gcd_SYS_BLOCKSIZE_DEFAULT==$1));then return 0;fi
		gcd-critical 0 "Boot $n of ${gcd__SYS_BOOTBLOCK[$n]} not waited in sys-alloc"
		gcd-sys-alloc-wait $n
	fi;done
	gcd_SYS_BOOTEDBLOCK=''
	gcd__SYS_BOOTPID=()
	gcd-critical 2 GetBlocks gcd-lock "$gcd_SYS_LOCK" gcd-capture -a gcd__SYS_BOOTBLOCK get-bootable-blocks --size $1 $COBALT_PARTNAME
	local -i st=$?
	if ((0!=st));then return $st;fi
	if ((gcd_SYS_BLOCKSIZE_DEFAULT!=$1));then gcd__SYS_BOOTBLOCK=(${gcd__SYS_BOOTBLOCK[0]});fi
	for((n=0;n<${#gcd__SYS_BOOTBLOCK[@]};++n));do gcd-critical 2 'Boot' boot-block --block ${gcd__SYS_BOOTBLOCK[$n]}&gcd__SYS_BOOTPID+=($!);done
	return 0
}
gcd-sys-alloc-wait(){	# Wait for unfinished async allocations, changes gcd__SYS_BOOTPID gcd_SYS_BOOTEDBLOCK
	# args: [N]	# the serial number
	if((0==$#));then
		local -i n
		for((n=0;n<${#gcd__SYS_BOOTPID[@]};++n));do if((gcd__SYS_BOOTPID[n]>0));then break;fi;done
	else
		local -ir n=$1
	fi
	if((n<0 || n>=${#gcd__SYS_BOOTPID[@]}));then
		return 1
	elif((gcd__SYS_BOOTPID[n]>0));then
		gcd-critical 2 WaitBoot wait ${gcd__SYS_BOOTPID[$n]}
		local -ir st=$?
		((gcd__SYS_BOOTPID[n]=-gcd__SYS_BOOTPID[n]))
		gcd_SYS_BOOTEDBLOCK=${gcd__SYS_BOOTBLOCK[$n]}
		return $st
	else gcd-critical 0 "Boot $n of ${gcd__SYS_BOOTBLOCK[$n]} already waited"
	fi
}
gcd-sys-free(){ gcd-try 3 gcd-critical 2 Free gcd-lock "$gcd_SYS_LOCK" boot-block --block $1 --free;}
gcd-sys-reboot(){ gcd-try 3 gcd-critical 2 Reboot gcd-lock "$gcd_SYS_LOCK" boot-block --block $1 --reboot;}

gcd-sys-run-job(){
	# args: OUTFN ERRFN CMD ...
	gcd-log 0 "EXEC: runjob --block $gcd_JOBBLOCK -p $rank_per_node --np $((block_size*rank_per_node)) --verbose=INFO
		--envs $gcd_SYS_RUNENV OMP_NUM_THREADS=$omp_nthreads BG_COREDUMPPATH=./core/$COBALT_JOBID.$gcd_JID/
		: ${*:3} >$1 2>$2"
	runjob --block $gcd_JOBBLOCK -p $rank_per_node --np $((block_size*rank_per_node)) --verbose=INFO \
		--envs $gcd_SYS_RUNENV OMP_NUM_THREADS=$omp_nthreads BG_COREDUMPPATH=./core/$COBALT_JOBID.$gcd_JID/ \
		: "${@:3}" >"$1" 2>"$2"
}

gcd-sys-submit(){
	# args: PROJECT TMIN NNODES CMD [...]
	local -r project="$1"
	local -r tmin="$2"
	local -ir nnodes=$3
	qsub -A "$project" -t "$tmin" -n $nnodes --mode script --disable_preboot "${@:4}"
}

gcd-sys-submit-self(){
	local p t n a
	read p t n a < <(qstat --header=Project:WallTime:Nodes:Args $COBALT_JOBID|tail -n1)
	echo "/usr/bin/qsub -A '$p' -t '$t' -n $n --mode script --disable_preboot '$gcd_JOBSCRIPT' $a >>log.$(whoami) 2>&1" | at now+10min
}

declare -a gcd_SYS_MANAGED_J=() gcd_SYS_MANAGED_P=() gcd_SYS_MANAGED_C=() gcd_SYS_MANAGED_A=()
declare -ai gcd_SYS_MANAGED_T=() gcd_SYS_MANAGED_N=()

gcd-sys-get-managed(){
	local j p c a
	local -i t n
	gcd_SYS_MANAGED_T=()	# time remaining
	gcd_SYS_MANAGED_J=()	# unique id
	gcd_SYS_MANAGED_P=()	# project
	gcd_SYS_MANAGED_N=()	# node number
	gcd_SYS_MANAGED_C=()	# command
	gcd_SYS_MANAGED_A=()	# args
	while read t j p n c a;do
		gcd-log 2 "$t , $j , $p , $n , $c , $a"
		gcd-log 2 "$(gcd-abspath "$GCD")  <>  $(gcd-abspath "$(dirname "$(dirname "$c")")")"
		[[ -s $c ]] || continue
		[[ $(gcd-abspath "$gcd_SCRIPTDIR") == $(gcd-abspath "$(dirname "$c")") ]] || continue
		gcd_SYS_MANAGED_T+=($t)
		gcd_SYS_MANAGED_J+=("$j")
		gcd_SYS_MANAGED_P+=("$p")
		gcd_SYS_MANAGED_N+=($n)
		gcd_SYS_MANAGED_C+=("$c")
		gcd_SYS_MANAGED_A+=("$a")
	done < <(qstat --header=WallTime:TimeRemaining:JobID:Project:Nodes:Command:Args|sed 1,2d|awk '{if($2~"[0-9:]")split($2,t,":");else split($1,t,":");a="";for(i=3;i<=NF;++i){a=a" "$i}print t[3]+60*(t[2]+60*t[1]),a}')
}
