#!/bin/bash
set -u

if [[ $BASH_SOURCE == $0 ]]; then
	declare -ri gcd_SOURCED=0
else
	declare -ri gcd_SOURCED=1
fi

if [[ -z ${GCD+X} ]];then declare -r GCD="$(cd "$(dirname "$BASH_SOURCE")";pwd)";fi

declare -r gcd_VERSION="gcd (Grand Central Dispatch) 1.0"

declare -r gcd_WORKDIR="$GCD/work"
declare -r gcd_JOBDIR="$GCD/jobs"
declare -r gcd_SCRIPTDIR="$GCD/scripts"

cd "$gcd_WORKDIR"	# chdir to work

# Relative paths for those only used in the main process that runs under gcd_WORKDIR
declare -r gcd_UTILDIR="../util"
declare -r gcd_CONF="../conf"
declare gcd_JOBSCRIPT="../scripts/r"

declare -ir gcd_BEGIN=$(date +%s)

declare -i gcd_VERBOSITY=1	# verbosity 0: failure only, 1: important info, 2: everything

# default to mira for now
source "$gcd_UTILDIR/mira"
if [[ -s ../scripts/testing.mira ]];then
	echo '### TESTING MODE ###'
	source ../scripts/testing.mira
fi

declare -a gcd_CONF_PLAN
source "$gcd_CONF"

declare -r gcd_CRITICAL="$gcd_WORKDIR/CRITICAL"
declare -r gcd_LOCK="$gcd_WORKDIR/.lock"	# lock for updating states

declare gcd_HEALTH_CHECK_WAIT=11
declare gcd_MANAGE_CHECK_WAIT=3

declare -i gcd_TIME_LIMIT_GRACE=1200
declare -i gcd_UPDATE_TIME_GRACE=300

declare -ai gcd_BLOCKSIZE gcd_NBLOCK_MAX
declare -a gcd_PREFER_CATEGORY=(URGENT)	# the priority category, later supercedes prior
declare -a gcd_PREFER_PATH=()	# the priority path, this supercedes category, later supercedes prior

declare -ir gcd_NO_JOBS=10
declare -ir gcd_NOT_ENOUGH_JOBS=11
declare -ir gcd_CANNOT_START=12
declare -ir gcd_MISC_ERROR=13
declare -ir gcd_JOB_SERVED=16
declare -ir gcd_HEALTH_BAD=31	# return code for bad health
declare -ir gcd_HEALTH_DIED=32	# return code for finished processes
declare -ir gcd_HW_ERROR=42

declare -a gcd_JOBS_PT	# jobpath
declare -ai gcd_JOBS_BS	# block_size
declare -ai gcd_JOBS_TL	# time_limit
declare -ai gcd_JOBS_RP	# repeat
declare -ai gcd_JOBS_IX	# sorted indices wrt urgency
declare -a gcd_JOBS_CG	# category
declare -ai gcd_JOBS_available gcd_JOBS_running gcd_JOBS_stop	# number of jobs in each status

declare -a gcd_EXIT_TRAP
declare gcd_LOG_TAG
declare -i gcd_PROC_LVL=0

declare -r gcd_JOBID_RE='^[^ 	#]+$'

declare -ar gcd_LOG_FUNCS=(gcd-caller gcd-info gcd-log gcd-critical gcd-exit-trap gcd-exit-announce gcd-sig)

gcd-caller(){	# Information of the caller without the logging facility
	local -i n
	local f
	for((n=0;n<${#FUNCNAME[@]};++n));do
		for f in ${gcd_LOG_FUNCS[@]};do if [[ $f == ${FUNCNAME[$n]} ]];then continue 2;fi;done
		break;
	done
	# Similar to calling: caller $((n-1))
	printf '%-20s %-20s\n' "${BASH_SOURCE[n]}:${BASH_LINENO[n-1]}" "${FUNCNAME[n]}"
}
gcd-info(){
	if((gcd_PROC_LVL>1));then local -ar p=(printf '%X %s \t%-90s \t%s\n' $(date +%s) "$(gcd-caller)")
	else local -ar p=(printf '%X %s \t%-35s \t%s\n' $(date +%s) "$(gcd-caller)")
	fi
	if((2>$#));then "${p[@]}" "<$gcd_LOG_TAG>" "$1";else "${p[@]}" "<$gcd_LOG_TAG:$1>" "${*:2}";fi
}

gcd-process-init(){	# initialize at the beginning of any useful subprocess
	# args: TAG
	gcd_PROC_LVL+=1
	if [[ -z ${gcd_LOG_TAG:+X} ]];then gcd_LOG_TAG="$1";else gcd_LOG_TAG+=":$1";fi
	gcd-set-trap
}

gcd-set-trap(){	# need to run in any subprocess that needs cleanup
	# args: [TAG]  # NO single quote allowed.
	gcd_EXIT_TRAP=(1 gcd-exit-announce)
	trap gcd-exit-trap 0
	trap "gcd-sig 1" 1
	trap "gcd-sig 2" 2
	trap "gcd-sig 3" 3
	trap "gcd-sig 15" 15
}
gcd-sig(){ gcd-info Sig "Got signal $1";exit;}>&2
gcd-exit-announce(){
	local -ir t=$(($(date +%s)-gcd_BEGIN))
	if((1<=gcd_VERBOSITY));then
		if [[ -z ${gcd_SYS_SIZE+X} ]];then
			gcd-info Exit "Ran DURATION $t seconds, exiting..."
		else
			gcd-info Exit "Ran DURATION $t seconds, $((t*gcd_SYS_SIZE)) node-seconds, exiting..."
		fi
	fi
}>&2
gcd-exit-trap(){
	if((0==${#gcd_EXIT_TRAP[@]}));then return;fi
	#{ printf "$(date) <$gcd_LOG_TAG> TRAP:";printf " '%s'" "${gcd_EXIT_TRAP[@]}";printf '\n';}>&2
	local -i n i=0
	while((i<${#gcd_EXIT_TRAP[@]}));do
		n=${gcd_EXIT_TRAP[i++]}
		#{ printf "$(date) <$gcd_LOG_TAG> EXEC:";printf " '%s'" "${gcd_EXIT_TRAP[@]:i:n}";printf '\n';}>&2
		"${gcd_EXIT_TRAP[@]:i:n}"
		i+=n
	done
}
gcd-with-exit-trap(){	# Run cmd with additional exit trap
	# args: N ATEXIT ... CMD ...
	# N is the length of ATEXIT command including its args.
	local -ri n=$1
	local -ri j=${#gcd_EXIT_TRAP[@]}
	local -r cmd=("${@:2:n}")
	gcd_EXIT_TRAP+=($n "${cmd[@]}")
	#{ printf "EXIT_TRAP pushed :";printf ' "%s"' "${gcd_EXIT_TRAP[@]}";printf '\n';} >&2
	"${@:2+n}"
	local -ir st=$?
	"${cmd[@]}"
	local -i i k
	local -a c=("${gcd_EXIT_TRAP[@]:0:j}")
	if((${#gcd_EXIT_TRAP[@]}>j+n+1));then c+=("${gcd_EXIT_TRAP[@]:j+n+1}");fi
	gcd_EXIT_TRAP=("${c[@]}")
	#{ printf "EXIT_TRAP popd :";((${#gcd_EXIT_TRAP[@]}>0))&&printf ' "%s"' "${gcd_EXIT_TRAP[@]}";printf '\n';} >&2
	return $st
}

gcd-call-info(){ echo "dir: '$(pwd)'";echo "call trace:";local -i n;for((n=0;;++n));do caller $n||break;done|nl;}
gcd-log(){	# Log info, no redirection
	# args: VERBOSITY [LABEL [CMD [...]]]
	local -i v=$1;shift
	if((0==$#));then gcd-log $v LOG gcd-call-info
	elif((1==$# && v<=gcd_VERBOSITY));then gcd-info "$1"
	else
		local -r _tag="$gcd_LOG_TAG";local gcd_LOG_TAG="$_tag:$1"
		local -ir t=$(date +%s)
		((v<=gcd_VERBOSITY))&&gcd-info "Starting ${*:2}"
		"${@:2}"
		local -ir st=$?
		((v<=gcd_VERBOSITY))&&gcd-info "Returned $st, took $(($(date +%s)-t)) seconds"
		return $st
	fi
}
gcd-critical(){	# Same as gcd-log, but save info in gcd_CRITICAL file
	# Output and save the message when giving no CMD.
	# When given CMD, only save failed CMD info in gcd_CRITICAL.
	local -i v=$1;shift
	if((2>$# && v<=gcd_VERBOSITY));then gcd-info "$*" | tee -a $gcd_CRITICAL
	else
		gcd-log $v "$@"
		local -ir st=$?
		if((0!=st));then gcd-info "$1" "cmd:$(printf " '%s'" "${@:2}") failed, returned $st" | tee -a $gcd_CRITICAL;fi
		return $st
	fi
}
gcd-abspath(){ perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1";}

gcd-get-jobs-count(){	# Count jobs, should be called following gcd-get-jobs-prop
	local -i i
	local p l
	for ((i=0;i<${#gcd_JOBS_PT[@]};++i));do
		p="${gcd_JOBS_PT[i]}"
		gcd_JOBS_available[i]=0
		gcd_JOBS_running[i]=0
		gcd_JOBS_stop[i]=0
		while read l;do
			[[ l =~ $gcd_JOBID_RE ]] || continue
			# check 'served' before 'stop'; the reverse of the order in gcd-return
			if [[ -a $p/run/$l.served ]];then gcd_JOBS_running[i]+=1;continue;fi
			if [[ -a $p/run/$l.stop ]];then gcd_JOBS_stop[i]+=1;continue;fi
			gcd_JOBS_available[i]+=1
		done <"$p/LIST"
	done
}		
gcd-get-jobs-prop(){	# Reads PROP under each JOBPATH
	# It populates gcd_JOBS_PT gcd_JOBS_BS gcd_JOBS_TL gcd_JOBS_RP gcd_JOBS_CG gcd_JOBS_IX
	# and gcd_JOBS_available gcd_JOBS_running gcd_JOBS_stop
	gcd_JOBS_PT=()
	gcd_JOBS_BS=()
	gcd_JOBS_TL=()
	gcd_JOBS_RP=()
	gcd_JOBS_CG=()
	gcd_JOBS_IX=()
	local -i block_size time_limit repeat
	local category p l
	local -i n=0
	for p in "$gcd_JOBDIR"/*;do
		[[ -s $p/PROP && -s $p/LIST && -s $p/JOB ]] || continue
		gcd_JOBS_PT[n]="$p"
		gcd-critical 2 GetProp source "$p/PROP"
		if((0>=time_limit));then time_limit=$(gcd-guess-time-limit "$p");fi
		gcd_JOBS_BS[n]=$block_size
		gcd_JOBS_TL[n]=$time_limit
		gcd_JOBS_RP[n]=$repeat
		gcd_JOBS_CG[n]="$category"
		gcd_JOBS_IX[n]=$n
		((++n))
	done
	((0==n))&&return $gcd_NO_JOBS
	gcd-log 2 "JOBPATH: ${gcd_JOBS_PT[*]}"
	# stable sort block size
	declare -ai ix=($(gcd-merge-sort gcd-compare-blocksize ${gcd_JOBS_IX[@]}))
	gcd_JOBS_IX=(${ix[@]})	# this is not generally correct if gcd_JOBS_IX wasn't 0..n-1 on the line above
	gcd-log 2 "Sorted indices after size sort: ${gcd_JOBS_IX[*]}"
	# stable sort category
	local c
	local -i i
	for c in "${gcd_PREFER_CATEGORY[@]}";do
		# this is the proper way to use gcd-merge-sort, note that the output is a sorted list of indices.
		ix=();for i in $(gcd-merge-sort "gcd-compare-category $c" ${gcd_JOBS_IX[@]});do ix+=(${gcd_JOBS_IX[i]});done
		gcd_JOBS_IX=(${ix[@]})
	done
	gcd-log 2 "Sorted indices after prefered category: ${gcd_JOBS_IX[*]}"
	# pick path
	((0==${#gcd_PREFER_PATH[@]}))&&return 0
	local -i i j
	for c in "${gcd_PREFER_PATH[@]}";do
		for i in ${gcd_JOBS_IX[@]};do [[ $c == ${gcd_JOBS_PT[i]} ]] && break;done
		ix=($i);for j in ${gcd_JOBS_IX[@]};do((i!=j))&&ix+=($j);done
		gcd_JOBS_IX=(${ix[@]})
	done
	gcd-log 2 "Sorted indices after prefered path: ${gcd_JOBS_IX[*]}"
}
gcd-compare-blocksize()((gcd_JOBS_BS[$1]>=gcd_JOBS_BS[$2]))
gcd-compare-category(){ gcd-word-in-str $1 "${gcd_JOBS_CG[$2]}" || ! gcd-word-in-str $1 "${gcd_JOBS_CG[$3]}";}

gcd-merge-sort(){	# Print indices to a list representing a stable sort, wraps gcd-merge-sort_
	# args: CMPFUNC ITEM0 ITEM1 ...
	# CMPFUNC is run without quote
	local -i i n=$(($#-1))
	local -ai ix
	for((i=0;i<n;++i));do ix[i]=$i;done
	gcd-merge-sort_ "$1" $n ${ix[@]} "${@:2}"
}
gcd-merge-sort_(){	# Print sorted indices
	# args: CMPFUNC NINDEX INDEX0 INDEX1 ... INDEXN ITEM0 ITEM1 ...
	#       1       2      3      4          2+n    3+n   4+n
	local -i n=$2
	local -ai z
	if((0==n));then return;elif((1==n));then z=($3)
	else
		local -i i=0 j=0 nx ny
		((nx=n-(ny=n/2)))
		local -ar l=("${@:3+n}")
		local -air x=($(gcd-merge-sort_ "$1" $nx ${@:3:nx} "${l[@]}"))
		local -air y=($(gcd-merge-sort_ "$1" $ny ${@:3+nx:ny} "${l[@]}"))
		while true;do
			if((${#x[@]}==i));then z+=(${y[@]:j});break;elif((${#y[@]}==j));then z+=(${x[@]:i});break;fi
			if $1 "${l[x[i]]}" "${l[y[j]]}";then z+=(${x[i]});((++i));else z+=(${y[j]});((++j));fi
		done
	fi
	echo ${z[*]}
}

gcd-word-in-str(){	# Test if word is in the string
	# args: WORD STRING
	# The syntax and availability of regex categories is not portable, use a simpler way to do the match here.
	local -r r='(^| |	)'"$1"'($| |	)'
	[[ $2 =~ $r ]]
}

gcd-status_(){	# Populates gcd_BLOCKSIZE gcd_NBLOCK_MAX if sourced
	gcd-critical 2 GetJobProp gcd-get-jobs-prop || return
	gcd-critical 2 GetJobCount gcd-get-jobs-count || return
	local -i i
	echo '## List of jobs ##'
	local -r fmt='%5s %9s %6s %20s %9s %7s %6s %s\n'
	printf "$fmt" '#Size' TimeLimit Repeat Path Available Running Stop Category
	for i in ${gcd_JOBS_IX[@]};do
		printf "$fmt" ${gcd_JOBS_BS[i]} ${gcd_JOBS_TL[i]} ${gcd_JOBS_RP[i]} "$(basename "${gcd_JOBS_PT[i]}")" ${gcd_JOBS_available[i]} ${gcd_JOBS_running[i]} ${gcd_JOBS_stop[i]} "${gcd_JOBS_CG[i]}"
	done
	local -i m=0
	for((i=1;i<${#gcd_CONF_PLAN[@]};i+=5));do((m<gcd_CONF_PLAN[i]))&&((m=gcd_CONF_PLAN[i]));done
	for i in ${gcd_JOBS_IX[@]};do
		if((m<gcd_JOBS_BS[i]));then
			echo "WARNING: Jobs under ${gcd_JOBS_PT[i]} has size ${gcd_JOBS_BS[i]} larger than configured in gcd_CONF_PLAN: $m"
		fi
	done
	local -r jfmt='%6d nodes %5d minutes %32s extra args: %s\n'
	gcd-sys-get-managed
	echo '## Current jobs ##'
	for((i=0;i<${#gcd_SYS_MANAGED_N[@]};++i));do
		printf "$jfmt" ${gcd_SYS_MANAGED_N[i]} $((gcd_SYS_MANAGED_T[i]/60)) "${gcd_SYS_MANAGED_P[i]}" "${gcd_SYS_MANAGED_A[i]}"
	done
	local -i avail=0 avail_rp=0 inqueue=0
	for i in ${gcd_JOBS_IX[@]};do
		if((0==gcd_JOBS_RP[i]));then((avail+=gcd_JOBS_BS[i]*gcd_JOBS_TL[i]*gcd_JOBS_available[i]))
		else((avail_rp+=gcd_JOBS_BS[i]*gcd_JOBS_TL[i]*gcd_JOBS_available[i]))
		fi
	done
	for((i=0;i<${#gcd_SYS_MANAGED_T[@]};++i));do((inqueue+=gcd_SYS_MANAGED_T[i]*gcd_SYS_MANAGED_N[i]));done
	local -r tfmt='%-40s : %19d node-seconds %12d Knode-day\n'
	printf "$tfmt" "total available non-repeatable jobs" $avail $((avail/(1024*24*3600)))
	printf "$tfmt" "total available repeatable jobs" $avail_rp$((avail_rp/(1024*24*3600)))
	printf "$tfmt" "total submitted jobs" $inqueue $((inqueue/(1024*24*3600)))
	read -n 1 -s -p '## Submitting according to conf? [y/N]';echo;if [[ $REPLY == [yY] ]];then
		local -i njob=0
		for((i=0;i<${#gcd_CONF_PLAN[@]};i+=5));do
			printf "* submitting $jfmt" "${gcd_CONF_PLAN[@]:i+1:4}"
			for((njob=0;njob<gcd_CONF_PLAN[i];++njob));do
				gcd-log 2 Submit gcd-sys-submit "${gcd_CONF_PLAN[i+3]}" ${gcd_CONF_PLAN[i+2]} ${gcd_CONF_PLAN[i+1]} "$gcd_JOBSCRIPT" "${gcd_CONF_PLAN[i+4]}" || break
			done
			echo "* $njob jobs submitted"
		done
	fi
}
gcd-status(){ gcd-critical 2 Status gcd-status_;}

gcd-compare-served-blocksize()((gcd_SERVED_SIZE[$1]>=gcd_SERVED_SIZE[$2]))
gcd-fetch_(){	# Used in gcd-fetch with a lock.
	# The followings (gcd_SERVED_*) are defined in gcd-launch
	#local -a gcd_SERVED_JOBPATH gcd_SERVED_JOBID
	#local -ai gcd_SERVED_SIZE gcd_SERVED_STARTED gcd_SERVED_IX
	local -i st
	gcd-critical 2 GetJobProp gcd-get-jobs-prop;st=$?;if((0!=st));then return $st;fi
	local -i unfilled=$req_blocksize
	local -i i s
	local c p
	for i in ${gcd_JOBS_IX[@]};do
		s=${gcd_JOBS_BS[i]}
		((req_timelimit<gcd_JOBS_TL[i])) && continue
		((unfilled<s)) && continue
		p="${gcd_JOBS_PT[i]}"
		if [[ ! -a $p/LIST ]];then gcd-critical 0 "Job list $p/LIST not available";continue;fi
		[[ -d $p/run ]] || mkdir "$p/run"
		while read c;do
			[[ $c =~ $gcd_JOBID_RE ]] || continue
			# Checks 'served' before 'stop', the reverse of the order in gcd-return.
			[[ -a $p/run/$c.served || -a $p/run/$c.stop ]] && continue
			echo "$gcd_SYS_UNIQUEID" >"$p/run/$c.served"
			gcd-log 0 "Job $p::$c of size $s served" | tee -a "$p/run/$c.log"
			gcd_SERVED_JOBPATH+=("$p")
			gcd_SERVED_JOBID+=("$c")
			gcd_SERVED_SIZE+=($s)
			gcd_SERVED_STARTED+=(0)
			((unfilled-=s))
			((unfilled<s)) && break
		done <"$p/LIST"
	done
	if((0==${#gcd_SERVED_STARTED[@]}));then return $gcd_NO_JOBS;fi
	if((0<unfilled));then return $gcd_NOT_ENOUGH_JOBS;fi
	# sort fetched jobs according to their sizes.
	local -ai ix=()
	for((i=0;i<${#gcd_SERVED_SIZE[@]};++i));do ix[i]=$i;done
	gcd_SERVED_IX=($(gcd-merge-sort gcd-compare-served-blocksize ${ix[@]}))	# directly use the output for ix is 0..n-1
	return 0
}
gcd-fetch(){	# Populates gcd_SERVED_SIZE gcd_SERVED_JOBPATH gcd_SERVED_JOBID
	# args: BLOCKSIZE TIMELIMIT
	local -ir req_blocksize=$1
	local -ir req_timelimit=$2
	gcd-log 2 Flock gcd-lock "$gcd_LOCK" gcd-fetch_
}

gcd-return(){	# Returns job running status
	# args: RETURNCODE JOBPATH JOBID
	local -ir st=$1
	local -r p="$2"
	local -r d="$3"
	local -i n=$(date +%s)
	if((0==st));then gcd-log 0 "Returned $st, TIME SPAN $((n-gcd_SERVED_TIME)) seconds since served, $((n-gcd_JBEGIN[gcd_JID])) seconds actual, cost $((gcd_JSIZES[gcd_JID]*(n-gcd_JBEGIN[gcd_JID]))) node-seconds" | tee -a "$p/run/$d.log"
	else gcd-critical 0 "Failed with code $st" | tee -a "$p/run/$d.log"
	fi
	# touches 'stop' before removing 'served', avoid race conditions with gcd-fetch_,
	# which checks 'served' before 'stop'.
	local -i i
	for((i=0;i<${#gcd_JOBS_PT[@]};++i));do [[ ${gcd_JOBS_PT[i]} == $p ]] && break;done
	if((0==$1 && 0==gcd_JOBS_RP[i]));then gcd-log 0 "Job $(gcd-job-string) stops" |tee -a "$p/run/$d.stop";fi
	rm "$p/run/$d.served"
	return $1
}

gcd-lock(){	# gcd-lock LOCKFILE CMD [ARGS...]
 	local -r lock="$1"; shift
 	local -i n=0
	while ! mkdir "$lock" 2>/dev/null;do
		sleep 0.1
		n+=1
		if((0==n%30));then gcd-log 1 "Still waiting for lock: $lock";fi
	done
	if((30<n));then gcd-log 1 "Lock $lock acquired";fi
	gcd-with-exit-trap 2 rmdir "$lock" "$@"
}

gcd-capture(){	# capture the stdout of a command, using eval and cmd substitution
	# args: [-a] VAR CMD ...
	# NOTE the proper quote in eval call
	if [[ $1 == -a ]];then
		shift
		eval "$1"'=($("${@:2}"))'
	else
		eval "$1"'=$("${@:2}")'
	fi
}

gcd-check-health(){   # assuming output file exists and ready to be checked
	# args: PID TIMELIMIT FILENAME
	local -ir pid=$1	# process id
	local -ir tl=$2	# time limit
	local -r fn="$3"	# file name to check for status
	if kill -0 $pid 2>/dev/null; then	# still running
		local -i it=$(($(date +%s)-$(date -r "$fn" +%s)))
		if((0<tl&&tl<it));then
			gcd-critical 0 "Not updated for $it seconds"
			return $gcd_HEALTH_BAD
		else
			((idle_time_max<it)) && idle_time_max=$it
			return 0
		fi
	else
		gcd-log 0 "max IDLE TIME $idle_time_max seconds" | tee -a run/$gcd_JOBID.log
		if((9*tl<10*idle_time_max));then gcd-critical 1 "IDLE TIME $idle_time_max seconds approaching limit";fi
		gcd-log 2 "Died"
		return $gcd_HEALTH_DIED
	fi
}

gcd-kill(){	# Recursively kill subprocesses
	# args: PID ...
	local -i p
	for p in $@; do
		if ((p<=0)); then gcd-critical 1 "gcd-kill ignores bad pid $p"; fi
		gcd-kill $(ps -o pid,ppid | awk '$2=='$p'{print $1}')
		kill -TERM $p >&/dev/null
	done
}

gcd-care(){	# Check output file timestamp while running a long running job
	# args: TIMELIMIT FILENAME CMD ...
	local -ir tl=$1;shift
	local -r fn="$1";shift
	"$@" &	
	local -ir pid=$!
	local -i idle_time_max=0	# used in gcd-check-health
	while true; do
		sleep $gcd_HEALTH_CHECK_WAIT
		if [[ ! -a $fn ]];then
			gcd-critical 0 "Lost the output file: $fn"
			h=$gcd_HEALTH_BAD
		else
			gcd-check-health $pid $tl "$fn"
			h=$?
		fi
		if ((0!=h)); then   # has health problem
			if ((h==gcd_HEALTH_BAD)); then   # get snapshot and backtrace
				gcd-sys-diagnosis
				gcd-critical 0 "Had bad health, killing it"
				gcd-kill $pid
			fi
			wait $pid
			st=$?
			if ((h==gcd_HEALTH_BAD)); then
				gcd-log 0 "Had bad health, killed and returned $st"
			elif ((h==gcd_HEALTH_DIED)); then
				gcd-log 2 "Had died, returned $st"
			fi
			return $st
		fi
	done
}

gcd-guess-time-limit(){	# Guess the time limit from previous runs
	# args: [JOBPATH]
	if((0==$#));then local -r p=.;else local -r p="$1";fi
	local -i t=$(find "$p/run" -name '*.log' -exec sed -n '/TIME SPAN/s/^.*TIME SPAN \([0-9]*\) .*$/\1/p' {} \; | sort -nr | head -n1)
	if((0<t));then((t=gcd_TIME_LIMIT_GRACE+105*t/100));gcd-critical 0 "Guessed time_limit=$t">&2;fi
	echo $t
}
gcd-guess-update-time(){	# Guess the update time from previous runs
	# args: [JOBPATH]
	if((0==$#));then local -r p=.;else local -r p="$1";fi
	local -i t=$(find "$p/run"  -name '*.log' -exec sed -n '/IDLE TIME/s/^.*IDLE TIME \([0-9]*\) .*$/\1/p' {} \; | sort -nr | head -n1)
	if((0<t));then((t=gcd_UPDATE_TIME_GRACE+2*t));fi
	if((time_limit<t && 0<time_limit || 0==t));then t=$time_limit;fi
	if((0<t));then gcd-critical 0 "Guessed update_time=$t">&2;fi
	echo $t
}

gcd-backup(){	# back up file with warning if there are more than three
	# args: FILEPATH
	local -r f="$1"
	local -i i=0
	while [[ -a $f.~$i~ ]];do ((++i));done
	((3<=i)) && gcd-critical 0 "There are $i back up files of $f" | tee -a run/$gcd_JOBID.log
	gcd-critical 2 Backup mv "$f" "$f.~$i~"
}

gcd-job-string(){
	# args: [INDEX]
	if((0==$#));then echo "[$gcd_JID:$(basename "$gcd_JOBPATH"):$gcd_JOBID@$gcd_JOBBLOCK:$gcd_JOBSIZE]"
	else echo "[$1]"
	fi
}
gcd-run-dir(){	# run under a particular directory
	# args: DIR CMD ...
	local -i st
	pushd "$1" >/dev/null;st=$?;if((0!=st));then gcd-critical 0 "Failed pushd '$1' returned $st";return $st;fi
	"${@:2}"
	st=$?
	if ! popd >/dev/null;then gcd-critical 1 "Failed popd from '$1'";fi
	return $st
}
gcd-run-job_(){	# run-job, assuming under the JOBPATH, changes gcd_JOBRETURN
	local -i block_size rank_per_node omp_nthreads update_time time_limit repeat
	local category
	gcd-critical 2 sourcePROP source PROP
	local -a run
	local output_path error_path
	gcd-critical 2 sourceJOB source JOB
	if((0>=time_limit));then time_limit=$(gcd-guess-time-limit);fi
	if((0>=update_time));then update_time=$(gcd-guess-update-time);fi
	[[ -a $output_path ]] && gcd-backup "$output_path"
	[[ -a $error_path ]] && gcd-backup "$error_path"
	gcd_JOBRETURN=$gcd_MISC_ERROR
	gcd-log 0 Run gcd-care $update_time "$output_path" gcd-sys-run-job "$output_path" "$error_path" "${run[@]}"
	gcd_JOBRETURN=$?
	return $gcd_JOBRETURN
}
gcd-run-job-return(){ gcd-return $gcd_JOBRETURN "$gcd_JOBPATH" "$gcd_JOBID";}
gcd-run-job(){	# reads gcd_JOBPATH and gcd_JOBID, set gcd_JOBSIZE and gcd_JOBBLOCK
	# args: JOBSIZE JOBBLOCK
	# Run in a subprocess.
	local -ir gcd_JOBSIZE=$1
	local -r gcd_JOBBLOCK=$2
	gcd-process-init "$(gcd-job-string)"
	local -i gcd_JOBRETURN=$gcd_CANNOT_START
	gcd-with-exit-trap 1 gcd-run-job-return gcd-run-dir "$gcd_JOBPATH" gcd-run-job_
}

gcd-launch-job(){	# updates gcd_JID gcd_JPID gcd_JBLOCKS gcd_JSIZES gcd_JBEGIN gcd_JTIME
	# args: JOBPATH JOBID SIZE BLOCK
	local -r gcd_JOBPATH="$1"
	local -r gcd_JOBID="$2"
	local -ir s=$3
	local -r b=$4
	gcd_JSIZES+=($s)
	gcd_JBLOCKS+=($b)
	gcd_JBEGIN+=($(date +%s))
	gcd_JTIME+=(0)
	gcd-log 2 RunJob gcd-run-job $s $b &
	gcd_JPID+=($!)
	gcd_JID+=1
	return 0
}
gcd-launch-return(){	# Cleanup fetched but failed to start jobs
	local -i i
	for((i=0;i<${#gcd_SERVED_JOBPATH[@]};++i));do if((0==gcd_SERVED_STARTED[i]));then
		gcd-return $gcd_CANNOT_START "${gcd_SERVED_JOBPATH[i]}" "${gcd_SERVED_JOBID[i]}"
	fi;done
}
gcd-launch(){	# Fetch available jobs and launch them with specified size and partition, or fill all available.
	# args: [BLOCKSIZE BLOCK]
	# reboot for used blocks
	# parallel boot for default blocks
	# return error if no blocks or not enough jobs available
	local -a gcd_SERVED_JOBPATH=() gcd_SERVED_JOBID=()
	local -ai gcd_SERVED_SIZE=() gcd_SERVED_STARTED=() gcd_SERVED_IX=()
	local -i gcd_SERVED_TIME=$(date +%s)
	gcd-with-exit-trap 1 gcd-launch-return gcd-launch_ "$@"
}
gcd-launch_(){	# Alloc or boot, and launch, should be run with 'gcd-with-exit-trap 1 gcd-launch-return gcd-launch_ "$@"'
	if((0==$#));then local -ir s=$gcd_SYS_SIZE;else local -ir s=$1;fi
	gcd-log 2 Fetch gcd-fetch $s $((gcd_SYS_ENDTIME-$(date +%s))) || return
	if((2==$# && 1==${#gcd_SERVED_SIZE[@]}));then	# When a physical block is allocated, and one job fits.
		gcd-sys-reboot $2 || return $gcd_HW_ERROR
		gcd-launch-job "$gcd_SERVED_JOBPATH" "$gcd_SERVED_JOBID" $gcd_SERVED_SIZE $2
		gcd_SERVED_STARTED=1
	else
		if((2==$#));then gcd-sys-free $2 || return $gcd_HW_ERROR;fi	# When a physical block is allocated but we need multiple jobs to fit it.
		for i in ${gcd_SERVED_IX[@]};do
			gcd-critical 2 Alloc gcd-sys-alloc ${gcd_SERVED_SIZE[i]} || return $gcd_HW_ERROR
			gcd-critical 2 AllocWait gcd-sys-alloc-wait || return $gcd_HW_ERROR
			gcd-launch-job "${gcd_SERVED_JOBPATH[i]}" "${gcd_SERVED_JOBID[i]}" ${gcd_SERVED_SIZE[i]} $gcd_SYS_BOOTEDBLOCK
			gcd_SERVED_STARTED[i]=1
		done
		if((gcd_SERVED_SIZE[i-1]==gcd_SYS_BLOCKSIZE_DEFAULT));then
			# When gcd-sys-alloc receives gcd_SYS_BLOCKSIZE_DEFAULT, it may creates more blocks than the jobs we fetched,
			# if previous unsuccessful job launches leave those blocks unused, and meanwhile new jobs become available.
			# We try to consume those partitions here.
			while gcd-log 2 AllocWait gcd-sys-alloc-wait;do	# It's okay to error.
				gcd-launch-return
				gcd_SERVED_JOBPATH=();gcd_SERVED_JOBID=();gcd_SERVED_SIZE=();gcd_SERVED_STARTED=();gcd_SERVED_IX=();gcd_SERVED_TIME=$(date +%s)
				gcd-log 2 LaunchFetch gcd-fetch $gcd_SYS_BLOCKSIZE_DEFAULT $((gcd_SYS_ENDTIME-$(date +%s))) || return
				# Assume only one job can be fetched for gcd_SYS_BLOCKSIZE_DEFAULT is the smallest
				# If not gcd-launch-return (in our exit trap) should take care of the not started ones.
				gcd-launch-job "$gcd_SERVED_JOBPATH" "$gcd_SERVED_JOBID" $gcd_SERVED_SIZE $gcd_SYS_BOOTEDBLOCK
				gcd_SERVED_STARTED=1
			done
		fi
	fi
}

gcd-report(){	# Report running jobs
	local -i i
	local -a s=()
	for((i=0;i<${#gcd_JPID[@]};++i));do if((0<gcd_JPID[i]));then s+=("$i@${gcd_JBLOCKS[i]}:${gcd_JSIZES[i]}");fi;done
	gcd-log 1 "Current running jobs: ${s[*]}"
}

gcd-manage(){
	# We keep track of the physical blocks and their sizes jobs are using.
	# When jobs finished we changes the sign of jpid to indicate that.
	local -i gcd_JID=0
	local -ai gcd_JPID gcd_JSIZES gcd_JBEGIN gcd_JTIME
	local -a gcd_JBLOCKS

	gcd-log 1 Launch gcd-launch || return

	local -i t st i=0 nrun=0 size=0 last_size=$gcd_SYS_SIZE emergency=0
	while true; do
		if ((0<gcd_JPID[i])); then	# not finished
			((++nrun));((size+=gcd_JSIZES[i]))
			sleep $gcd_MANAGE_CHECK_WAIT
			if ! kill -0 ${gcd_JPID[i]} 2>/dev/null; then	# finished
				((--nrun));((size-=gcd_JSIZES[i]))
				wait ${gcd_JPID[i]};st=$?
				((gcd_JTIME[i]=$(date +%s)-gcd_JBEGIN[i]))
				gcd-log 1 "Job $(gcd-job-string $i) returned $st used ${gcd_JTIME[i]} seconds and cost $((gcd_JTIME[i]*gcd_JSIZES[i])) node-seconds"
				((gcd_JPID[i]=-gcd_JPID[i]))
				if((0==emergency));then	# Only launch jobs if zero emergency
					gcd-log 1 Launch gcd-launch ${gcd_JSIZES[i]} ${gcd_JBLOCKS[i]};st=$?
					((gcd_HW_ERROR==st)) && emergency=$gcd_HW_ERROR
				fi
			fi
		fi
		i+=1
		if((${#gcd_JPID[@]}<=i));then if((0==nrun));then break;else
			if((size<last_size));then last_size=$size;gcd-log 1 "REDUCED capacity run of size: $size (full: $gcd_SYS_SIZE)";gcd-report;fi
			i=0;nrun=0;size=0
		fi;fi
	done
	gcd-critical 2 SelfSub gcd-sys-submit-self
	local -ir n=$((gcd_SYS_SIZE*($(date +%s)-gcd_BEGIN)))
	t=0;for((i=0;i<${#gcd_JSIZES[@]};++i));do ((t+=gcd_JSIZES[i]*gcd_JTIME[i]));done
	gcd-log 1 "Productivity (with manage overhead): $t / $n : $((100*t/n))%"
}

if [[ -z ${gcd_SYS_UNIQUEID+X} ]];then gcd-process-init "GCD";else gcd-process-init "GCD($gcd_SYS_UNIQUEID)";fi
while(($#>0));do
	case $1 in
	-v)gcd_VERBOSITY=2;shift;;
	-s)gcd_VERBOSITY=0;shift;;
	*)if [[ -s $gcd_JOBDIR/$1/PROP ]];then gcd_PREFER_PATH+=("$gcd_JOBDIR/$1");else gcd_PREFER_CATEGORY+=("$1");fi;shift
	esac
done
gcd-log 2 "gcd_PREFER_CATEGORY=(${gcd_PREFER_CATEGORY[*]})"
((0<${#gcd_PREFER_PATH[@]}))&&gcd-log 2 "gcd_PREFER_PATH=(${gcd_PREFER_PATH[*]})"
if((0==gcd_SOURCED));then gcd-status;fi
